# device.py
import hmac, hashlib, base64, json
from cryptography.hazmat.primitives.kdf.hkdf import HKDF
from cryptography.hazmat.primitives import hashes

COHORT_SECRET = b"sealed_cohort_secret_32bytes_______"
AUTH_MAC_KEY  = b"server_auth_mac_key_64bytes________"

def b64u_dec(s): return base64.urlsafe_b64decode(s + "==")

def derive_epoch_key(ticket, purpose: bytes, group_id: bytes, device_id: bytes):
    payload_bytes = b64u_dec(ticket["payload_b64"])
    tag = b64u_dec(ticket["tag_b64"])

    expected = hmac.new(AUTH_MAC_KEY, payload_bytes, hashlib.sha512).digest()
    if not hmac.compare_digest(tag, expected):
        raise ValueError("Invalid HMAC!")

    payload = json.loads(payload_bytes.decode())
    seed_epoch = b64u_dec(payload["seed_b64"])
    epoch = payload["epoch"]

    info = b"purpose=" + purpose + b";group=" + group_id + b";epoch=" + str(epoch).encode()
    ikm = seed_epoch + COHORT_SECRET

    hkdf = HKDF(algorithm=hashes.SHA512(), length=32, salt=str(epoch).encode(), info=info)
    return hkdf.derive(ikm)

if __name__ == "__main__":
    # Import the ticket generated by the server
    import server
    ticket = server.new_entropy_ticket()

    key = derive_epoch_key(ticket, b"vpn-psk", b"ops-alpha", b"DT-042")
    print("Derived working key:", key.hex())
